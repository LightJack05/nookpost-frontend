/* tslint:disable */
/* eslint-disable */
/**
 * nookpost-backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common'
import type { RequestArgs } from './base'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base'

/**
 * The body of a login request.
 * @export
 * @interface AuthenticationLoginRequestBody
 */
export interface AuthenticationLoginRequestBody {
  /**
   * The name of the user to log in.
   * @type {string}
   * @memberof AuthenticationLoginRequestBody
   */
  username?: string | null
  /**
   * The users password
   * @type {string}
   * @memberof AuthenticationLoginRequestBody
   */
  password?: string | null
}
/**
 * Represents a token object in the response to a Login request
 * @export
 * @interface AuthenticationLoginResponseBody
 */
export interface AuthenticationLoginResponseBody {
  /**
   * The token that can be used for authentication.
   * @type {string}
   * @memberof AuthenticationLoginResponseBody
   */
  token?: string | null
  /**
   * The time in seconds the token expires on.
   * @type {number}
   * @memberof AuthenticationLoginResponseBody
   */
  expiryTimestamp?: number
}
/**
 * The request body of a user create request
 * @export
 * @interface UsersCreateRequestBody
 */
export interface UsersCreateRequestBody {
  /**
   * The name of the user to log in.
   * @type {string}
   * @memberof UsersCreateRequestBody
   */
  username?: string | null
  /**
   * The users password
   * @type {string}
   * @memberof UsersCreateRequestBody
   */
  password?: string | null
}
/**
 * Represents a token object in the response to a user create request
 * @export
 * @interface UsersCreateResponseBody
 */
export interface UsersCreateResponseBody {
  /**
   * The token that can be used for authentication.
   * @type {string}
   * @memberof UsersCreateResponseBody
   */
  token?: string | null
  /**
   * The time in seconds the token expires on.
   * @type {number}
   * @memberof UsersCreateResponseBody
   */
  expiryTimestamp?: number
}

/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Authenticates the user and returns an access token.
     * @param {AuthenticationLoginRequestBody} authenticationLoginRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authenticationLoginPost: async (
      authenticationLoginRequestBody: AuthenticationLoginRequestBody,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'authenticationLoginRequestBody' is not null or undefined
      assertParamExists(
        'authenticationLoginPost',
        'authenticationLoginRequestBody',
        authenticationLoginRequestBody,
      )
      const localVarPath = `/authentication/login`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        authenticationLoginRequestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Authenticates the user and returns an access token.
     * @param {AuthenticationLoginRequestBody} authenticationLoginRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authenticationLoginPost(
      authenticationLoginRequestBody: AuthenticationLoginRequestBody,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticationLoginResponseBody>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authenticationLoginPost(
        authenticationLoginRequestBody,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AuthenticationApi.authenticationLoginPost']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AuthenticationApiFp(configuration)
  return {
    /**
     *
     * @summary Authenticates the user and returns an access token.
     * @param {AuthenticationLoginRequestBody} authenticationLoginRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authenticationLoginPost(
      authenticationLoginRequestBody: AuthenticationLoginRequestBody,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<AuthenticationLoginResponseBody> {
      return localVarFp
        .authenticationLoginPost(authenticationLoginRequestBody, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
  /**
   *
   * @summary Authenticates the user and returns an access token.
   * @param {AuthenticationLoginRequestBody} authenticationLoginRequestBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApi
   */
  public authenticationLoginPost(
    authenticationLoginRequestBody: AuthenticationLoginRequestBody,
    options?: RawAxiosRequestConfig,
  ) {
    return AuthenticationApiFp(this.configuration)
      .authenticationLoginPost(authenticationLoginRequestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Creates a new user.u
     * @param {UsersCreateRequestBody} usersCreateRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCreatePost: async (
      usersCreateRequestBody: UsersCreateRequestBody,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'usersCreateRequestBody' is not null or undefined
      assertParamExists('usersCreatePost', 'usersCreateRequestBody', usersCreateRequestBody)
      const localVarPath = `/users/create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        usersCreateRequestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Creates a new user.u
     * @param {UsersCreateRequestBody} usersCreateRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersCreatePost(
      usersCreateRequestBody: UsersCreateRequestBody,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersCreateResponseBody>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersCreatePost(
        usersCreateRequestBody,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['UsersApi.usersCreatePost']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = UsersApiFp(configuration)
  return {
    /**
     *
     * @summary Creates a new user.u
     * @param {UsersCreateRequestBody} usersCreateRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCreatePost(
      usersCreateRequestBody: UsersCreateRequestBody,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<UsersCreateResponseBody> {
      return localVarFp
        .usersCreatePost(usersCreateRequestBody, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
  /**
   *
   * @summary Creates a new user.u
   * @param {UsersCreateRequestBody} usersCreateRequestBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public usersCreatePost(
    usersCreateRequestBody: UsersCreateRequestBody,
    options?: RawAxiosRequestConfig,
  ) {
    return UsersApiFp(this.configuration)
      .usersCreatePost(usersCreateRequestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
